# travel-companion-backend/main.py

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from utils.gemini_client import suggest_tourist_places
from utils.gemini_travel_planner import get_gemini_travel_details

app = FastAPI()

# Configure CORS
origins = [
    "http://localhost:3000",  # Your React app's address
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic model for the /api/suggest endpoint (existing)
class SuggestRequest(BaseModel):
    address: str

# Pydantic model for the new /api/get-travel-details endpoint
class PlaceCoords(BaseModel):
    title: str
    address: str
    latitude: float | None
    longitude: float | None
    summary: str
    image: str
    main_attraction: str
    best_time_to_visit: str
    visiting_hours: str
    wiki: str | None = None

class TravelDetailsRequest(BaseModel):
    selectedPlaces: list[PlaceCoords]
    startLocation: str

@app.post("/api/suggest")
async def suggest_places(req: SuggestRequest):
    print(f"Received request for address: {req.address}")
    places = suggest_tourist_places(req.address)
    print(f"Sending {len(places)} places to frontend.")
    return {"places": places}

# --- Endpoint for Travel Details, powered by Gemini ---
@app.post("/api/get-travel-details")
async def get_travel_details(req: TravelDetailsRequest):
    selected_places_data = [p.dict() for p in req.selectedPlaces]
    print(f"Received request for travel details for {len(selected_places_data)} places from starting point: {req.startLocation}.")

    # Call the new Gemini-based travel planner with the start_location
    travel_plan = get_gemini_travel_details(selected_places_data, req.startLocation)

    if "error" in travel_plan:
        raise HTTPException(status_code=500, detail=travel_plan["error"])
    
    print("Travel plan generated by Gemini:", travel_plan)
    return travel_plan

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8086, reload=True)